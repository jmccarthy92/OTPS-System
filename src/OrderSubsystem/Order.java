package OrderSubsystem;

import AccountSubsystem.Account;
import AccountSubsystem.User;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;

import ProductManagementSystem.Product;
import javafx.beans.property.SimpleStringProperty;


/**
 * This Class implements an Order with specific private attributes
 * tied to the Order, as well as mutators and accessor's so the interfaces
 * can work with the object in a flexible way
 * Also added a toString in case for printing purposes.
 * @author James McCarthy
 * @version 1.0
 * 
 */

public class Order 
{
	
	/**
	 * <p>
	 *  Order ID - Identifies the Order for retrieval / insertion / deletion methods
	 *  Product List - List of products that this Order Contains
	 *  Sales Total - The total price of this order
	 *  Order Quantity - the total number of items in this Order
	 *  Order Date - The Date this Order was created.
	 *  Order Status- enum that states whether this order is shipped, unshipped, or cancelled.
	 *  Address - The address Object that conatins the zip code, street address, first name, last name, etc.
	 *  Credit Card - The credit card object that contains the CSV Number, CC Number, Expiration date, CC Type.
	 *  is Paid - A boolean that is a flag for if this order is paid or not.
	 */
	private String orderId;
	private LinkedList<Product> productList;
	private double salesTotal;
	private int orderQuantity;
	private Timestamp orderDate;
	private OrderStatus orderStatus;			
	private Address address;
	private CreditCard creditCard;
	private boolean isPaid ;
	private User account;

	
	/**
	 * 
	 * <p>
	 * This Constructs an order with a specified Order Id,
	 * A List of Products, Sales Total, Address Object,
	 * and a Credit Card Object. Also also used the 
	 * arrayLists size method to get the productQuantity
	 * and the orderDate = new Date(); will get the date of
	 * the order when it is created.
	 * @param orderIdIn - The id passed into the Order
	 * @param productsIn - the List of Products for the Order
	 * @param salesTotalIn - the Sales total Of the Order
	 * @param addressIn	 -  The Address for the Order ( we assume billing and shipping address are the same)
	 * @param cc		- The Credit Card Object associated with the order.
	 */
	public Order( String orderIdIn, LinkedList<Product> productsIn, double salesTotalIn, 
				  Address addressIn, CreditCard cc, User account)
	{
		this.orderId = orderIdIn;
		this.productList = productsIn;
		this.salesTotal = salesTotalIn;
		this.orderQuantity = productsIn.size();
		orderDate = new Timestamp( new Date().getTime());
		this.address = addressIn;
		this.creditCard = cc;			
		orderStatus = OrderStatus.UnShipped;
		this.account = account;
		
	}

	/**
	 * Constructs an "unfinished order" this is used in the Order cOllection create order method
	 * to create an ORder Object with just the Product List (Copied from the shopping car), Account 
	 * that's making the order , and the sales total for the order derived from the product lsit.
	 * 
	 * @param productsIn
	 * @param salesTotalIn
	 * @param account
	 */
	public Order( LinkedList<Product> productsIn, double salesTotalIn,
				  User account)
	{
	//	this.orderId = orderIdIn;
		this.account = account;
		this.salesTotal = salesTotalIn;
		this.productList = productsIn;
		orderStatus = OrderStatus.UnShipped;
		this.orderQuantity = productsIn.size();
		
	}
	
	/** COnstructs the finished Order after filling the Address and CreditCard object in
	 * the makePayment private method of create ORder - It lacks the OrderID passed through the parameter
	 * since the ID is automatically generated by the mySQL database.
	 * @param productsIn
	 * @param salesTotalIn
	 * @param addressIn
	 * @param cc
	 * @param account
	 */
	public Order( LinkedList<Product> productsIn, double salesTotalIn,
			Address addressIn, CreditCard cc, User account)
{
//	this.orderId = orderIdIn;
	this.account = account;
	this.salesTotal = salesTotalIn;
	this.productList = productsIn;
	orderStatus = OrderStatus.UnShipped;
	this.orderQuantity = productsIn.size();
	this.creditCard = cc;
	this.address = addressIn;
	
}
	
	
	
	// for admin//
	public Order( String orderIdIn, LinkedList<Product> productsIn, 
				double salesTotalIn, Address addressIn, CreditCard cc, User account,
				Timestamp ts, OrderStatus os)
	{
		this.orderId = orderIdIn;
		this.productList = productsIn;
		this.salesTotal = salesTotalIn;
		//this.orderQuantity = productsIn.size();
		//orderDate = new Timestamp(System.currentTimeMillis());
		this.orderDate = ts;
		this.address = addressIn;
		this.creditCard = cc;			
		orderStatus = os; // OrderStatus.UnShipped;
		this.account = account;
	
}
	
/*	public Order( String orderIdIn,  LinkedList<Product> productsIn, double salesTotalIn, Account account)
	{
		this.orderId = orderIdIn;
		this.productList = productsIn;
		this.salesTotal = salesTotalIn;
		this.orderQuantity = productsIn.size();
		orderDate = new Timestamp(System.currentTimeMillis());
		orderStatus = OrderStatus.UnShipped;
		this.account = account;
	}*/
	
	public User getAccount() { return account; }
	/**
	 * This returns the product List tied to this Order
	 * @return this Order's Product List
	 */
	public LinkedList<Product> getProudctList() { return productList; }
	
	public String printProductList()
	{
		String j = "";
		
		if( productList!= null)
		{
			for( Product p : productList)
			{
				j = p.toString() + "\t";
			}
		}
		return j;
	}
	/**
	 * This returns the Order ID for this Order
	 * @return this Order's Order ID
	 */
	public String getOrderId()				   { return orderId; }
	
	/**
	 * This returns this Orders Sales Total
	 * @return the Sales total
	 */
	public double getSalesTotal()  			   { return salesTotal; }
	
	//public void setCreatedOrderDate() { orderDate = new Timestamp(System.currentTimeMillis());}
	/**
	 * This returns this Orders Quantity of Products in the Order
	 * @return the Orders Product Quantity
	 */
	public int getQuantity()				   { return orderQuantity; }
	
	/**
	 * This returns this Orders Date it was created
	 * @return this Orders date created
	 */
	public Timestamp getOrderDate()				   { return orderDate; }
	
	/**
	 * This returns this Orders Order Status ( un-shipped, shipped, cancelled)
	 * @return the Status of this Order
	 */
	public String getOrderStatus() 	   { return orderStatus.toString(); }
	
	public OrderStatus getOrderStatusForTable() {return orderStatus; }
	/**
	 * This returns the Address Object of this Order
	 * This address objects holds the first name, last name,
	 * street, state, and zip code
	 * @return the Address Object of this Order
	 */
	public Address getAddress() 			   { return address; }
	
	/**
	 * This returns the Payment Status of this Order being paid, or unpaid.
	 * @return the payment Status of the order
	 */
	public boolean getPaymentStatus()		   { return isPaid;	}
	
	/**
	 * This returns the Credit Card Object of this order The CreditCard Class holds the
	 * CC Number, CSV Number, CC Type, and Expiration Date.
	 * @return The CreditCard Object for this Order.
	 */
	public CreditCard getCreditCard()		   { return creditCard; }

	/**
	 * Mutator Used to set the private variable for Order Id to the one
	 * passed into the parameter
	 * @param orderIdIn - Order ID passed in
	 */
	public void setOrderId(String orderIdIn )
	{
		this.orderId = orderIdIn;
	}
	
	/**
	 * Mutator used to set the private variable for SalestotalIn to the one
	 * passed into the parameter
	 * @param salesTotalIn - Sales total Passed in
	 */
	public void setSalesTotal( double salesTotalIn )
	{
		this.salesTotal = salesTotalIn;
	}
	
	/**
	 * Used to changed the product list associated with this order
	 * also uses the updateQuantity method to update the Order quantity
	 * variable for this Order.
	 * @param productsIn - new Product list this Order is tied too
	 */
	public void changeProductList( LinkedList<Product> productsIn)
	{
		this.productList = productsIn;
		updateQuantity();
	}
	
	public void setOrderDate()
	{
		orderDate = new Timestamp( new Date().getTime());
		orderDate.setTime(1000 * (long)Math.floor(orderDate.getTime()/ 1000));
	}
	public void setAccount( User account)
	{
		this.account = account;
	}
	/**
	 * Method Used to update the quantity of the products in the order if
	 * more products are added to the product list.
	 */
	public void updateQuantity ( )
	{
		this.orderQuantity = productList.size();
	}
		
	/**
	 * Mutator used to change the Order Status of this order ( Shipped, Un Shipped, Cancelled)
	 * @param statusIn - Status Enum passed in
	 */
	public void setOrderStatus( OrderStatus statusIn)
	{
		this.orderStatus = statusIn;
	}
	
	/**
	 * Mutator used to change the Address tied to this Order
	 * @param address - Address Object Passed In
	 */
	public void setAddress( Address address)
	{
		this.address = address;
	}

	/**
	 * Mutator used to Change the Credit Card associated with this Order
	 * @param cc - Credit Card object passed in
	 */
	public void setCreditCard( CreditCard cc)
	{
		this.creditCard = cc;
	}
	
	/**
	 * Mutator used to change the payment status of the Order to True (paid) or false (not paid)
	 * @param payStat - The payment status true/false value passed in.
	 */
	public void setPaymentStatus( boolean payStat)
	{
		this.isPaid = payStat;
	}
		
	public String confirmationPrint()
	{
		String cString = String.format("%1$-7s %2$7s ", account.getID(), salesTotal);// productList.toString());
	//%3$7s
		return cString;
	}
	/**
	 * Wraps up all the private attributes of this Order Class into a String
	 * for viewing purposes.
	 * @return A String Object of all the Order Class' private variables
	 */
	public String toString()
	{
		String orderString = String.format("%1$-7s %2$-7s %3$-7s %4$-7s %5$-7s %6$-7s", 
											orderId, salesTotal, orderQuantity, orderDate,
											orderStatus, address.getAddressForDB());
		return orderString;
	}
			
}
